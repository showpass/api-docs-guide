[
  {
    "id": "/api/event-list",
    "title": "Event List by Organization",
    "path": "/api/event-list",
    "content": "``\nhttps://www.showpass.com/api/public/discovery/?venue__in=id\n`\nDisplays all upcoming public events for a specific organization.\nNavigate to https://www.showpass.com/dashboard/venues/edit/ to find the organization ID in the top right corner.\nMake sure you add your website's domain to the \"Integrations\" tab on the same page.\n| Parameter | Type | Status | Description |\n|-----------|------|--------|-------------|\n| categories | String | Optional | Include all events that have the following categories<br>&categories=\"category_one,category_two\" |\n| tags | String | Optional | Include all events that have the following tags<br>&tags=\"tag+one,tag+two\" |\n| tags_exact | String | Optional | Include only events that have all of the tags<br>&tags=\"tag+one,tag+two\" |\n| page_size | Integer | Optional | Number of results to return [default: 20]<br>&page_size=8 |\n| page_number | Integer | Optional | The specific page number to return<br>&page_number=8 |\n| id__in | Integer | Optional | Return a list of specific events<br>&id__in=1,2,3 |\n| starts_on__gte | ISO date | Optional | Return a list of events with a start time after a specific date<br>&starts_on__gte=2019-06-23T19:30 |\n| ends_on__lt | ISO date | Optional | Return a list of events with the end time before a specific date<br>&ends_on__lt=2019-06-23T19:30 |\n| ordering | String | Optional | Specify the order the events are returned<br>starts_on: Order events by event start date<br>id: Order events by event ID<br>name: Order alphabetically by event name<br>&ordering=\"-name\" (order descending by event name) |\n| show | String | Optional | Return all events regardless of visibility settings<br>&show=all |\n| only_parents | Boolean | Optional | Return parent events and single events - recommended use for recurring events<br>&only_parents=true |\n`\nhttps://www.showpass.com/api/public/discovery/?\\\n    venue__in=123&\\\n    page_size=10&\\\n    ordering=starts_on&\\\n    tags=featured\n``\nSimply copy and paste the completed URL into your browser"
  },
  {
    "id": "/api/events",
    "title": "Showpass Public API",
    "path": "/api/events",
    "content": "``\nhttps://www.showpass.com/api/public/discovery/\n`\nThe Showpass Public Event API allows you to fetch event data programmatically. You can use this API to display events on your website, build custom integrations, or create your own applications that interact with Showpass events.\nThe Public Event API is open and does not require authentication for basic event queries. However, your domain must be added to the allowlist in the Showpass Dashboard under your organization's settings.\nAll responses are returned in JSON format.\n`json\n{\n  \"count\": 42,\n  \"next\": \"https://www.showpass.com/api/public/discovery/?page=2\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"id\": 123,\n      \"name\": \"Example Event\",\n      \"slug\": \"example-event\",\n      \"venue\": {\n        \"id\": 45,\n        \"name\": \"Example Venue\",\n        \"address\": \"123 Main Street\"\n      },\n      \"starts_on\": \"2023-12-31T20:00:00Z\",\n      \"ends_on\": \"2024-01-01T02:00:00Z\",\n      \"timezone\": \"America/Edmonton\",\n      \"image\": \"https://www.showpass.com/media/images/example.jpg\",\n      \"description\": \"This is an example event description\",\n      \"status\": \"Published\",\n      \"categories\": [\"Music\", \"Entertainment\"],\n      \"tags\": [\"featured\", \"new-years\"]\n    }\n  ]\n}\n``\nFor additional details and query parameters, please refer to the Event List and Query a Specific Event sections."
  },
  {
    "id": "/api/query-event",
    "title": "Query a Specific Event",
    "path": "/api/query-event",
    "content": "``\nhttps://www.showpass.com/api/public/events/slug/\n`\n| Parameter | Type | Status | Description |\n|-----------|------|--------|-------------|\n| slug | String | Required | The unique slug of the event on Showpass<br>showpass.com/this-is-the-slug/ |\n`\nhttps://www.showpass.com/api/public/events/sample-event-name/\n`\nThe response will be a JSON object containing all public details about the requested event.\n`json\n{\n  \"id\": 123,\n  \"name\": \"Sample Event Name\",\n  \"slug\": \"sample-event-name\",\n  \"venue\": {\n    \"id\": 45,\n    \"name\": \"Example Venue\",\n    \"address\": \"123 Main Street\"\n  },\n  \"starts_on\": \"2023-12-31T20:00:00Z\",\n  \"ends_on\": \"2024-01-01T02:00:00Z\",\n  \"timezone\": \"America/Edmonton\",\n  \"image\": \"https://www.showpass.com/media/images/example.jpg\",\n  \"description\": \"This is an example event description\",\n  \"status\": \"Published\",\n  \"categories\": [\"Music\", \"Entertainment\"],\n  \"tags\": [\"featured\", \"new-years\"],\n  \"tickets\": [\n    {\n      \"id\": 456,\n      \"name\": \"General Admission\",\n      \"price\": \"25.00\",\n      \"service_fee\": \"2.50\",\n      \"quantity_remaining\": 100\n    }\n  ]\n}\n``\nSimply copy and paste the completed URL into your browser to view the response.\nDownload the JSON View extension for Chrome for in-browser formatting for readability."
  },
  {
    "id": "/google-tag-manager/01-introduction-to-showpass-gtm-integration",
    "title": "Introduction to Showpass Google Tag Manager (GTM) Integration",
    "path": "/google-tag-manager/01-introduction-to-showpass-gtm-integration",
    "content": "Welcome to the Showpass Google Tag Manager (GTM) integration guide. This documentation will help you understand how to leverage GTM to track user activity, implement Google Analytics 4 (GA4), and integrate other marketing tags for events and purchases managed through Showpass.\nIntegrating Showpass with Google Tag Manager allows you to:\n- Track detailed ecommerce events (like view_item, add_to_cart, purchase).\n- Send this data to Google Analytics 4 (GA4) for comprehensive reporting.\n- Implement various third-party marketing and analytics tags (e.g., Facebook Pixel, TikTok Pixel, Google Ads) without modifying your website code directly.\n- Gain deeper insights into customer behavior and conversion funnels.\nTo avoid sending duplicate data to your Google Analytics 4 property:\n- Do NOT add the same GA4 Property ID (Measurement ID) in both your Showpass organization settings AND within your GTM container setup.\n- If you are using GTM to manage your GA4 tracking (which is the recommended approach when using GTM), ensure that GA4 tracking is configured _only_ through GTM. Remove any direct GA4 Measurement ID from your Showpass organization settings if you plan to deploy GA4 via GTM.\n- Advanced Knowledge: Effective use of Google Tag Manager requires advanced knowledge and practical experience with GTM concepts, tags, triggers, and variables.\n- Showpass Disclaimer: Showpass is not responsible for GTM containers that are incorrectly set up or for any tracking issues that may arise from misconfiguration. Users are responsible for the correct implementation and testing of their GTM setup.\nIf you are not familiar with Google Tag Manager or wish to refresh your knowledge, we highly recommend these introductory resources from Google:\n- Tag Manager Help - Overview: https://support.google.com/tagmanager/answer/6102821?hl=en\n- Google Analytics YouTube Channel - Google Tag Manager Basics: https://www.youtube.com/watch?v=tQDdv_WqCgg\nProceed with the following sections to set up your GTM "
  },
  {
    "id": "/google-tag-manager/02-initial-setup-ga4-and-gtm-basics",
    "title": "Initial Setup: GA4 and GTM Basics",
    "path": "/google-tag-manager/02-initial-setup-ga4-and-gtm-basics",
    "content": "This section guides you through the foundational steps of setting up a Google Tag Manager (GTM) container and a Google Analytics 4 (GA4) property, then linking them for basic page view tracking. This is the first step before implementing more advanced ecommerce tracking.\n- You have a Google account.\n- You have access to Google Tag Manager and Google Analytics.\n1.  Go to Google Tag Manager.\n2.  Click Create Account.\n    - Account Name: Enter a name for your account (e.g., your company name).\n    - Country: Select your country.\n3.  Under Container Setup:\n    - Container name: Enter a descriptive name (e.g., YourWebsite.com - Showpass).\n    - Target platform: Select Web.\n4.  Click Create.\n5.  Agree to the GTM Terms of Service.\n6.  You will be presented with GTM installation code snippets. You won't need to install these directly on your Showpass pages, as Showpass will use your GTM Container ID. Make a note of your GTM Container ID (e.g., GTM-XXXXXXX).\n1.  Go to Google Analytics.\n2.  If you have an existing account, select it. If not, create a new Google Analytics account.\n3.  Navigate to the Admin section (usually a gear icon in the bottom left).\n4.  In the \"Property\" column, click Create Property.\n5.  Enter a Property name (e.g., YourWebsite GA4).\n6.  Set your Reporting time zone and Currency.\n7.  Click Next. Provide your business information (optional).\n8.  Click Create.\n9.  For \"Choose a platform,\" select Web.\n10. Set up your data stream:\n    - Website URL: Enter your main website URL (even if you're primarily tracking Showpass).\n    - Stream name: Give it a name (e.g., Main Website Stream).\n11. Click Create stream.\n12. A \"Web stream details\" page will appear. Make a note of your MEASUREMENT ID (e.g., G-XXXXXXXXXX). This is your GA4 Property ID.\nThis tag will send basic page view data and initialize GA4 on pages where GTM is loaded.\n1.  In your GTM container, go to Tags and click New.\n2.  Name your tag: A descriptive name like GA4 - Configuration - All Pages or Ini"
  },
  {
    "id": "/google-tag-manager/03-standard-ecommerce-tracking-with-ga4-via-gtm",
    "title": "Standard Ecommerce Tracking with GA4 via GTM",
    "path": "/google-tag-manager/03-standard-ecommerce-tracking-with-ga4-via-gtm",
    "content": "After setting up the basic GA4 Configuration Tag, the next step is to configure Google Tag Manager (GTM) to capture and send detailed ecommerce events from Showpass to your Google Analytics 4 (GA4) property.\nThis setup allows you to track user interactions with your products and events, such as viewing items, adding to cart, initiating checkout, and completing purchases. This data is crucial for understanding your sales funnel and customer behavior.\nShowpass sends ecommerce data to the Data Layer. This GTM configuration will listen for these Data Layer events and forward them to GA4.\nThis trigger will fire your GA4 ecommerce tag whenever one of the specified Showpass ecommerce events occurs.\n1.  In your GTM container, go to Triggers and click New.\n2.  Name your trigger: A descriptive name like Custom - Showpass Ecommerce Events or Ecommerce Triggers | All Events.\n3.  Trigger Configuration:\n    - Click Choose a trigger type to begin setup...\n    - Select Custom Event.\n    - Event name: Enter the following, using a pipe | to separate event names:\n      ``\n      view_item|add_to_cart|remove_from_cart|begin_checkout|purchase\n      `\n    - Check the box for Use regex matching. This allows the trigger to fire on any of the listed events.\n    - This trigger fires on: Select All Custom Events.\n4.  Click Save.\nThis tag will send the ecommerce data to GA4.\n1.  In your GTM container, go to Tags and click New.\n2.  Name your tag: A descriptive name like GA4 - Ecommerce Event Tracking or Ecommerce Tracking.\n3.  Tag Configuration:\n    - Click Choose a tag type to begin setup...\n    - Select Google Analytics: GA4 Event.\n    - Measurement ID: Enter your GA4 Measurement ID (e.g., G-XXXXXXXXXX). This should be the same ID used in your GA4 Configuration Tag.\n      - _Tip: You can create a Constant Variable in GTM for your Measurement ID to reuse it easily and avoid typos. For example, create a variable named {{GA4 Measurement ID}} and use that here._\n    - Event Name: Click the variabl"
  },
  {
    "id": "/google-tag-manager/04-cross-domain-tracking-considerations",
    "title": "Cross-Domain Tracking Considerations",
    "path": "/google-tag-manager/04-cross-domain-tracking-considerations",
    "content": "Cross-domain tracking is essential when a user's journey spans across multiple domains (e.g., your website yourdomain.com and Showpass showpass.com) and you want to maintain a single, consistent session and user view in Google Analytics.\nThere are two primary scenarios where cross-domain tracking is relevant with Showpass:\n1.  Redirecting from your website to showpass.com (e.g., a \"Buy Tickets\" button links directly to an event page on Showpass).\n2.  Using the embedded Showpass widget (iFrame) on your website.\nIf your website directly links users to pages on showpass.com, you need to configure your Google Tag (used for GA4) in GTM to handle cross-domain tracking. This involves allowing the GA4 tag to \"decorate\" links with linker parameters (_gl).\nSetup Instructions:\nGoogle provides detailed instructions on how to configure cross-domain tracking for GA4. Please refer to their official help article:\n- Google Analytics Help - Set up cross-domain measurement [GA4]: https://support.google.com/analytics/answer/10071811\nKey steps typically involve:\n1.  Navigating to your Google Tag (the one used for GA4 Configuration, e.g., GA4 - Configuration - All Pages) in GTM.\n2.  Under Configuration Settings > Configure domains, add the domains involved (e.g., yourdomain.com, showpass.com).\n3.  Ensure your GA4 data stream settings in the GA4 UI are also configured for cross-domain tracking by adding the relevant domains.\nTracking user activity accurately within an iFrame (like the Showpass embedded purchase widget) presents challenges, especially with browser privacy features that restrict third-party cookies.\n- For the most accurate tracking of widget conversions within GTM, Showpass strongly recommends using the postMessage iFrame tracking method.\n- This technique allows the iFrame to communicate data directly to the parent page (your website), bypassing many common cross-domain and third-party cookie issues.\n- This method is detailed in Section 8: \"Advanced & Preferred: iFrame Purc"
  },
  {
    "id": "/google-tag-manager/05-working-with-custom-html-and-javascript-in-gtm-for-showpass",
    "title": "Working with Custom HTML & JavaScript in GTM for Showpass",
    "path": "/google-tag-manager/05-working-with-custom-html-and-javascript-in-gtm-for-showpass",
    "content": "When using Google Tag Manager (GTM) with Showpass, you might need to implement Custom HTML tags for third-party tracking pixels or other custom JavaScript functionalities. Due to Showpass's security settings, there are specific configurations required to ensure these custom scripts load and fire correctly.\nShowpass employs security measures that can block inline scripts or scripts loaded without proper attributes. To allow your GTM Custom HTML/JavaScript tags to execute:\n- You must add a nonce attribute to all <script> opening tags within your Custom HTML tags in GTM.\n- This nonce value will be dynamically provided by Showpass through a GTM variable you'll set up.\nThis variable will read a dynamic nonce value that Showpass makes available on the page.\n1.  In your GTM container, navigate to Variables.\n2.  Under \"User-Defined Variables,\" click New.\n3.  Name your variable: nonce (lowercase is conventional).\n4.  Variable Configuration:\n    - Click Choose a variable type to begin setup...\n    - Select DOM Element.\n    - Selection Method: Choose ID.\n    - Element ID: Enter gtm-showpass-client\n      - _This is a specific ID Showpass uses to provide the nonce value._\n    - Attribute Name: Enter data-ngtm\n      - _This is the data attribute on the element above that will hold the nonce string._\n5.  Click Save.\nFor every Custom HTML tag in GTM that contains a <script>...</script> block, you need to modify the opening <script> tag.\n1.  Go to the Tags section in GTM and open the Custom HTML tag you want to edit.\n2.  Locate the opening <script> tag.\n3.  Add the nonce attribute, using the GTM variable you just created: nonce=\"{{nonce}}\".\n    Example:\n    - Before:\n      ``html\n      <script>\n        // Your custom JavaScript code\n        console.log(\"My custom script is running!\");\n      </script>\n      `\n    - After:\n      `html\n      <script nonce=\"{{nonce}}\">\n        // Your custom JavaScript code\n        console.log(\"My custom script is running!\");\n      </script>\n      `\n4. "
  },
  {
    "id": "/google-tag-manager/06-tracking-custom-conversions-marketing-pixels",
    "title": "Tracking Custom Conversions (e.g., Marketing Pixels)",
    "path": "/google-tag-manager/06-tracking-custom-conversions-marketing-pixels",
    "content": "Google Tag Manager (GTM) allows you to implement various third-party tracking tags (often called \"pixels\") for services like TikTok, Twitter, Facebook, Google Ads, and others. This section explains the general process of setting up these tags to fire on specific Showpass ecommerce events, using the data Showpass provides to the Data Layer.\nThe process for setting up most conversion or event tracking pixels involves these main steps in GTM:\n1.  Creating GTM Variables: To capture dynamic data (like value, currency, item details) sent by Showpass for ecommerce events.\n2.  Creating GTM Triggers: To specify _when_ your marketing tag should fire (e.g., on an add_to_cart event or a purchase event).\n3.  Creating GTM Tags: To configure your specific marketing pixel with the necessary IDs and map the GTM variables to the fields required by the pixel.\nLet's walk through setting up tracking for the add_to_cart event. Showpass sends ecommerce.currency, ecommerce.value, and ecommerce.items parameters for this event (see the Showpass Event List table at the end of this section).\nYou need to create GTM variables to read the values that Showpass pushes to the Data Layer for the add_to_cart event.\n1.  In your GTM container, go to the Variables tab.\n2.  Under \"User-Defined Variables,\" click New for each variable you need.\n    - Variable 1: Currency\n      - Name: SP - ecommerce.currency (or a similar descriptive name)\n      - Variable Type: Data Layer Variable\n      - Data Layer Variable Name: ecommerce.currency (This must exactly match the key Showpass uses in the Data Layer)\n      - Leave \"Data Layer Version\" as Version 2.\n      - Click Save.\n    - Variable 2: Value\n      - Name: SP - ecommerce.value\n      - Variable Type: Data Layer Variable\n      - Data Layer Variable Name: ecommerce.value\n      - Click Save.\n    - Variable 3: Items\n      - Name: SP - ecommerce.items\n      - Variable Type: Data Layer Variable\n      - Data Layer Variable Name: ecommerce.items\n      - Click Save.\n   "
  },
  {
    "id": "/google-tag-manager/07-showpass-data-layer-details",
    "title": "Showpass Data Layer Details",
    "path": "/google-tag-manager/07-showpass-data-layer-details",
    "content": "Understanding how Showpass interacts with the Data Layer is key to successfully configuring your tags and variables in Google Tag Manager (GTM). The Data Layer is a JavaScript object that GTM uses to receive information from your website or, in this case, from Showpass services.\nShowpass implements a dynamic naming convention for the Data Layer variable to support scenarios where multiple GTM containers or data layers might coexist on a page.\n- If your GTM Container ID is, for example, GTM-12345678, the Data Layer variable name that Showpass will use and push data to will be:\n  dataLayer_GTM_12345678\n- The general format is: dataLayer_GTM_YOUR-CONTAINER-ID (replacing YOUR-CONTAINER-ID with your actual GTM ID without the GTM- prefix, or verify the exact name in your browser console). The provided example implies the GTM- prefix is _included_ in the variable name, so dataLayer_GTM_12345678 is the format to expect.\nImportant: When you are setting up Data Layer Variables in GTM (as described in Section 6 for ecommerce parameters), you typically do not need to specify this full dynamic name in the \"Data Layer Variable Name\" field in GTM. GTM is designed to work with the concept of a \"data layer\" and will usually pick up pushes to any array named dataLayer or specifically named ones if configured correctly at a deeper GTM level or via custom JavaScript. For standard Data Layer Variable configuration in GTM, you just use the key name (e.g., ecommerce.value).\nIf you need to access the Showpass-specific Data Layer directly within a Custom JavaScript Variable in GTM or a Custom HTML tag script, you would use its dynamic name:\n``javascript\n// Example: Accessing the Showpass specific dataLayer in a GTM Custom JavaScript Variable\n// Replace GTM-12345678 with YOUR actual GTM Container ID\nvar specificDataLayer = window.dataLayer_GTM_12345678;\n// You can then iterate over it or access its properties\nif (specificDataLayer) {\n  for (var i = 0; i < specificDataLayer.length; i++) {\n   "
  },
  {
    "id": "/google-tag-manager/08-advanced-iframe-purchase-tracking-via-postmessage",
    "title": "Advanced & Preferred: iFrame Purchase Tracking via `postMessage`",
    "path": "/google-tag-manager/08-advanced-iframe-purchase-tracking-via-postmessage",
    "content": "Tracking conversions and user activity accurately within an iFrame (like the Showpass embedded purchase widget) is a significant challenge due to browser privacy measures that increasingly block third-party cookies and tracking mechanisms.\nTo overcome this, Showpass advocates for a more robust method: iFrame tracking using the postMessage API. This technique allows secure communication between the Showpass iFrame (child) and your website (parent page), enabling the iFrame to send event data directly to your GTM container on the parent page.\n- Accuracy: Bypasses many issues related to third-party cookie restrictions, leading to more reliable data.\n- Privacy-Focused: Relies on direct communication rather than cross-domain cookie sharing for event data.\n- Recommended: Considered a best practice for iFrame tracking in modern web analytics.\nFor more context on iFrame tracking challenges and solutions:\n- Jellyfish Training - How to Track iFrames with Google Tag Manager: https://www.jellyfish.com/en-gb/training/blog/how-track-iframes-google-tag-manager\n- MeasureSchool - iFrame Tracking with Google Tag Manager: https://measureschool.com/iframe-tracking/\nThis setup involves two Google Tag Manager containers:\n1.  Child GTM Container (for the Showpass iFrame):\n    - This container is specifically for the Showpass widget environment.\n    - Showpass will provide you with a new, empty GTM Container ID for this purpose. You will need to request this from Showpass support or your account manager.\n    - Its role is to capture ecommerce events within the iFrame and postMessage them to the parent window (your website).\n2.  Main/Parent GTM Container (on your website):\n    - This is your existing GTM container that manages tracking for your primary website.\n    - Its role is to listen for messages from the Showpass iFrame and then push that data into its own dataLayer to trigger your standard ecommerce tags (e.g., GA4, marketing pixels).\n---\nYou (or Showpass, with your input) will confi"
  },
  {
    "id": "/google-tag-manager/09-advanced-tracking-widget-and-direct-purchases",
    "title": "9. Advanced: Differentiating Widget (iFrame) vs. Direct showpass.com Event Tracking",
    "path": "/google-tag-manager/09-advanced-tracking-widget-and-direct-purchases",
    "content": "In some advanced scenarios, you might want to differentiate GTM tag firing behavior based on whether an event originates from within the embedded Showpass widget (iFrame on your site) or from a direct interaction on showpass.com (if your GTM container is also deployed there, or if Showpass sends server-side events that populate your website's GTM).\nThis allows for more granular control, such as:\n   Applying different attributions.\n   Sending slightly different data to certain marketing tags.\n   Preventing duplicate firing if events could be captured through both postMessage (from the iFrame) and direct Data Layer pushes (on showpass.com or via server events).\nThe key is to create a GTM variable that detects if the current context is an iFrame.\nThis variable will return true if the GTM container is currently operating within an iFrame, and false otherwise.\n1.  In your Main/Parent GTM container (your website's GTM), go to Variables.\n2.  Under \"User-Defined Variables,\" click New.\n3.  Name your variable: Custom JS - Is iFrame (or similar).\n4.  Variable Configuration:\n       Choose variable type: Custom JavaScript.\n       Paste the following script:\n        ``javascript\n        function() {\n          try {\n            // window.self refers to the current window.\n            // window.top refers to the topmost window in the window hierarchy.\n            // If they are not the same, the current window is in an iFrame.\n            return window.top !== window.self;\n          } catch (e) {\n            // Catch potential errors if window.top is inaccessible due to cross-origin restrictions,\n            // though less common for this specific check.\n            return false; \n          }\n        }\n        `\n5.  Click Save.\nNow, use the {{Custom JS - Is iFrame}} variable as a condition in your relevant GTM triggers.\nThese triggers should only fire when the event data originates from the iFrame via postMessage.\n   If your postMessage listener tag (from Section 8B) pushes distinc"
  },
  {
    "id": "/google-tag-manager/10-example-google-ads-conversion-tracking-setup",
    "title": "Example: Google Ads Conversion Tracking Setup with GTM",
    "path": "/google-tag-manager/10-example-google-ads-conversion-tracking-setup",
    "content": "This section provides a step-by-step example of how to set up Google Ads conversion tracking and remarketing using Google Tag Manager (GTM) for Showpass events. This assumes you have already configured GTM to receive ecommerce data from Showpass (as outlined in previous sections, especially Section 3 and Section 6).\n- A Google Ads account.\n- Conversion actions set up in your Google Ads account (you'll need Conversion ID and Conversion Label).\n- Your GTM container is correctly receiving ecommerce data from Showpass (e.g., purchase events with value, transaction_id, currency, items).\nEnsure you have GTM variables to capture the required data for Google Ads conversion tracking. Refer to Section 6, Step 1 for detailed instructions on creating Data Layer Variables. You will typically need:\n- SP - ecommerce.value:\n  - Data Layer Variable Name: ecommerce.value\n- SP - ecommerce.transaction_id:\n  - Data Layer Variable Name: ecommerce.transaction_id\n- SP - ecommerce.currency:\n  - Data Layer Variable Name: ecommerce.currency\n- SP - ecommerce.items:\n  - Data Layer Variable Name: ecommerce.items (for product-level sales data)\n_(Use your chosen GTM variable names, e.g., {{SP - ecommerce.value}})_\nThe Conversion Linker tag is essential for ensuring accurate conversion measurement by setting first-party cookies.\n1.  In your GTM container, go to Tags and click New.\n2.  Name the tag: Google Ads - Conversion Linker.\n3.  Tag Configuration:\n    - Click Choose a tag type to begin setup...\n    - Select Conversion Linker.\n    - Linking across domains:\n      - Check the box for Enable linking across domains.\n      - In the \"Domains to Link\" field, add your website domain and showpass.com. For example: yourdomain.com, showpass.com.\n4.  Triggering:\n    - Click Choose a trigger to make this tag fire...\n    - Select the Initialization - All Pages trigger (or a standard \"All Pages\" trigger).\n5.  Click Save.\nThis tag builds remarketing lists by tagging users who visit your site or interact with S"
  },
  {
    "id": "/sdk/calendar",
    "title": "Calendar Widget",
    "path": "/sdk/calendar",
    "content": "Opens the widget for a specific venue (id) that allows the user to select ticket quantities for multiple events on different days and proceed to checkout.\n``javascript\nshowpass.tickets.calendarWidget(venue_id, params);\n`\n| Parameter | Type | Status | Description |\n|-----------|------|--------|-------------|\n| params.theme-primary | String | Optional | Hex code value for main widget color |\n| params.tags | String | Optional | Comma separated string which will tell calendar to only display events with these tags |\n`javascript\nlet params = {\n   'theme-primary': '#dd3333',\n   'tags': 'festivals,community',\n};\nshowpass.tickets.calendarWidget(ORG_ID, params);\n``"
  },
  {
    "id": "/sdk/cart-counter",
    "title": "Cart Quantity Counter",
    "path": "/sdk/cart-counter",
    "content": "Returns the number of items in the current shopping cart.\nCan be used with js-cookie (https://github.com/js-cookie/js-cookie) and jQuery to display a dynamic cart count throughout the shopping experience and on page load.\n``javascript\nshowpass.tickets.addCartCountListener(count);\n`\n`javascript\njQuery.noConflict();\n(function($) {\n    $(window).on('load', function() {\n        // Initialize counter and update count and cookie value when changed\n        showpass.tickets.addCartCountListener(function (count) {\n            let html = '';\n            if (count > 0) {\n                html = 'Cart ('+count+')';\n                Cookies.set('cart', html);\n                $('.menu-item-449 a span').html(html);\n            } else {\n                html = 'Cart';\n                Cookies.set('cart', html);\n                $('.menu-item-449 a span').html(html);\n            }\n        });\n    });\n    $(document).on('ready', function() {\n        // Display cart quantity on page load\n        if (Cookies.get('cart')) {\n            $('.menu-item-449 a span').html(Cookies.get('cart'));\n        }\n    });\n})(jQuery);\n``"
  },
  {
    "id": "/sdk/check-out",
    "title": "Check Out Widget",
    "path": "/sdk/check-out",
    "content": "Opens the checkout widget, depending on settings will prompt for login if not already logged in.\n``javascript\nshowpass.tickets.checkoutWidget(params);\n`\n| Parameter | Type | Status | Description |\n|-----------|------|--------|-------------|\n| params | Object | Optional | Configuration object for the widget |\n| params.theme-primary | String | Optional | Hex code value for main widget color |\n| params.keep-shopping | Boolean | Optional | Displays \"Keep Shopping\" instead of \"Close\" on button verbiage |\n| params.tracking-id | - | - | Not supported |\n`javascript\nlet params = {\n   'theme-primary': '#dd3333',\n   'keep-shopping': false,\n};\nshowpass.tickets.checkoutWidget(params);\n``"
  },
  {
    "id": "/sdk/embedded-calendar",
    "title": "Embedded Calendar Widget",
    "path": "/sdk/embedded-calendar",
    "content": "Attaches the calendar widget for a specific venue (id) to a <div> tag with the id showpass-calendar-widget that allows the user to select ticket quantities for multiple events on different days and proceed to checkout.\n``javascript\nshowpass.tickets.mountCalendarWidget(ORG_ID, params);\n`\n| Parameter | Type | Status | Description |\n|-----------|------|--------|-------------|\n| params.theme-primary | String | Optional | Hex code value for main widget color |\n| params.tags | String | Optional | Comma separated string which will tell calendar to only display events with these tags |\n| params.tracking-id | String | Optional | Tracking link tracking-id, for tracking, bypassing passwords, displaying hidden ticket types etc. |\n`html\n<div id=\"showpass-calendar-widget\"></div>\n<script type=\"text/javascript\">\nlet params = {\n   'theme-primary': '#000000',\n};\nshowpass.tickets.mountCalendarWidget(ORG_ID, params);\n</script>\n``"
  },
  {
    "id": "/sdk/getting-started",
    "title": "Showpass SDK",
    "path": "/sdk/getting-started",
    "content": "Showpass has an SDK that makes it easy to embed and call the ticket selection and purchase widgets.\nPlease note: Your domain must have a valid SSL certificate installed in order to work properly.\n``javascript\n(function(window, document, src) {\n    let config = window.__shwps;\n    if (typeof config === \"undefined\") {\n        config = function() {\n            config.c(arguments)\n        };\n        config.q = [];\n        config.c = function(args) {\n            config.q.push(args)\n        };\n        window.__shwps = config;\n        let s = document.createElement('script');\n        s.type = 'text/javascript';\n        s.async = true;\n        s.src = src;\n        let x = document.getElementsByTagName('script')[0];\n        x.parentNode.insertBefore(s, x);\n    }\n})(window, document, 'https://www.showpass.com/static/dist/sdk.js');\n`\n`html\n<script type=\"text/javascript\" src=\"https://showpass.com/static/dist/sdk.js\"></script>\n`\nYou can call showpass.tickets using an onclick=\"\"` function within the HTML template, or from the JavaScript file.\nShowpass has 6 functions that can be called using the SDK:\n1. Ticket Selection Widget\n2. Product Selection Widget\n3. Shopping Cart Widget\n4. Check Out Widget\n5. Login Widget\n6. Cart Quantity Counter\n7. Calendar Widget\n8. Embedded Calendar Widget"
  },
  {
    "id": "/sdk/login",
    "title": "Login Widget",
    "path": "/sdk/login",
    "content": "Opens the Showpass widget and asks the user to log in, if not already.\nUsed for ensuring a user is already logged in when adding tickets to their basket for features like auto ticket credit applications etc.\n``javascript\nshowpass.tickets.loginWidget(params);\n`\n| Parameter | Type | Status | Description |\n|-----------|------|--------|-------------|\n| params | Object | Optional | Configuration object for the widget |\n| params.theme-primary | String | Optional | Hex code value for main widget color |\n| params.keep-shopping | Boolean | Optional | Displays \"Keep Shopping\" instead of \"Close\" on button verbiage |\n| params.tracking-id | - | - | Not supported |\n`javascript\nlet params = {\n   'theme-primary': '#dd3333',\n   'keep-shopping': false,\n};\nshowpass.tickets.loginWidget(params);\n``"
  },
  {
    "id": "/sdk/product-selection",
    "title": "Product Selection Widget",
    "path": "/sdk/product-selection",
    "content": "Opens the product selection widget for specified product (id).\n``javascript\nshowpass.tickets.productPurchaseWidget(id, params);\n`\n| Parameter | Type | Status | Description                                                                                                                                                      |\n|-----------|------|--------|------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| id | Integer | Required | The unique id of the product on Showpass. To find, go to Dashboard > Marketplace > Edit Product https://www.showpass.com/dashboard/inventory/products/<ID>/edit/ |\n| params.theme-primary | String | Optional | Hex code value for main widget color                                                                                                                             |\n| params.theme-secondary | String | Optional | Hex code value for accent widget color                                                                                                                           |\n| params.theme-dark | Boolean | Optional | Displays the widget in a dark theme                                                                                                                              |\n| params.keep-shopping | Boolean | Optional | Displays \"Keep Shopping\" instead of \"Close\" on button verbiage                                                                                                   |\n| params.tracking-id | - | - | Not supported                                                                                                                                                    |\n| params.show-description | Boolean | Optional | Displays or hides event description default: true (deploy date: October 15th 2019)                                                                               |\n`javascript\nlet params = {\n   'theme-primary': '#dd333"
  },
  {
    "id": "/sdk/shopping-cart",
    "title": "Shopping Cart Widget",
    "path": "/sdk/shopping-cart",
    "content": "Opens a widget to display shopping cart contents.\n``javascript\nshowpass.tickets.shoppingCartWidget(params);\n`\n| Parameter | Type | Status | Description |\n|-----------|------|--------|-------------|\n| params | Object | Optional | Configuration object for the widget |\n| params.theme-primary | String | Optional | Hex code value for main widget color |\n| params.keep-shopping | Boolean | Optional | Displays \"Keep Shopping\" instead of \"Close\" on button verbiage |\n| params.tracking-id | - | - | Not supported |\n`javascript\nlet params = {\n   'theme-primary': '#dd3333',\n   'keep-shopping': false,\n};\nshowpass.tickets.shoppingCartWidget(params);\n``"
  },
  {
    "id": "/sdk/ticket-selection",
    "title": "Ticket Selection Widget",
    "path": "/sdk/ticket-selection",
    "content": "Opens the widget for a specific event (slug) that allows the user to select ticket quantities and proceed to checkout.\n``javascript\nshowpass.tickets.eventPurchaseWidget(slug, params);\n`\n| Parameter | Type | Status | Description |\n|-----------|------|--------|-------------|\n| slug | String | Required | The unique slug of the event on Showpass<br>showpass.com/this-is-the-slug/ |\n| params.theme-primary | String | Optional | Hex code value for main widget color |\n| params.show-specific-tickets | String | Optional | Only show specific ticket types in the widget. Accepts a comma separated list of ticket type ids in a string format |\n| params.keep-shopping | Boolean | Optional | Displays \"Keep Shopping\" instead of \"Close\" on button verbiage |\n| params.tracking-id | String | Optional | Tracking link tracking-id, for affiliate tracking, bypassing passwords, displaying hidden ticket types etc. |\n| params.show-description | Boolean | Optional | Displays or hides event description<br>default: true<br>(deploy date: October 15th 2019) |\n`javascript\nlet params = {\n   'theme-primary': '#dd3333',\n   'keep-shopping': false,\n   'tracking-id': '123ABC34',\n   'show-description': true,\n   'show-specific-tickets': '1234,5678',\n};\nshowpass.tickets.eventPurchaseWidget('this-is-the-slug', params);\n``"
  },
  {
    "id": "/webhooks/getting-started",
    "title": "Showpass Webhooks",
    "path": "/webhooks/getting-started",
    "content": "To make it easier for organizers to integrate Showpass with other systems and automate their workflows, Showpass provides webhook functionality. Webhooks allow external systems to be notified when certain events occur in Showpass, such as when a new order is placed or when a ticket transfer occurs.\nBy setting up a webhook to be triggered by a specific event, external systems can be notified in real-time and perform automated actions based on the event data. Below is a list of the events for which Showpass provides webhook support:\n| Event Name | Description |\n|------------|-------------|\n| invoice.purchase | Triggered when a new order is created |\n| invoice.refund | Triggered when a transaction is refunded |\n| invoice.void | Triggered when a transaction is voided |\n| invoice.transfer | Triggered when a transfer has been completed and new invoices and tickets have been generated |\n| invoice.transferred | Triggered when a transfer has been completed and updates the original invoice and ticket items. Should be used to void original tickets when a transfer is completed. |\nThe Showpass Webhook Objects section describes the format of the webhook objects that will be sent when specific events are triggered. For example, when the \"invoice.purchase\" event is triggered, Showpass will send an \"invoice\" object containing information about the purchase.\nThe invoice object contains detailed information about a purchase, refund, or other transaction-related event.\nHere is an example of a request that we send as a webhook when we're sending the invoice structure:\n- Http Method: 'POST'\n- URL: '$https://yoursite.com/webhook/'\n- Header: 'X-SHOWPASS-SIGNATURE: \"HMAC-SHA1(id, $YOUR_WEBHOOK_TOKEN)\"'\nRequest Body:\n``json\n{\n  \"id\": \"fd-3bc3-463c-8f41-a92971330c06\",\n  \"event_type\": \"invoice.purchase\",\n  \"webhook_event_uuid\": \"06d5dc13-2eea-48ad-9f40-2a5bfc9e4c2c\",\n  \"data\": {\n    \"transaction_id\": \"b3-3eb2-405b-b640-39ec45d04fda\",\n    \"showpass_organization_id\": \"20\",\n    \"customer_name\": \""
  },
  {
    "id": "/wordpress/01-getting-started-install-and-configure",
    "title": "Getting Started with the Showpass WordPress Plugin",
    "path": "/wordpress/01-getting-started-install-and-configure",
    "content": "Welcome to the Showpass WordPress Plugin! This guide will help you get the plugin installed and configured on your WordPress website. It's designed to be easy to follow, even if you're not a technical expert.\n- A WordPress website.\n- Access to your WordPress admin dashboard (usually yourwebsite.com/wp-admin).\n- A Showpass account with an Organization ID. If you don't have one, you can register at showpass.com/organizations/register/.\nThere are two ways to install the Showpass WordPress Plugin:\nMethod 1: Automatic Installation (Recommended)\n1.  Log in to your WordPress Dashboard.\n2.  Navigate to Plugins > Add New. [1]\n    - _(Suggested: Include a screenshot of the WordPress menu highlighting \"Plugins\" and then \"Add New\")_\n3.  In the search bar in the top right-hand corner, type \"Showpass\".\n4.  Locate the \"Showpass Wordpress Extension\" plugin in the search results and click Install Now. [1]\n    - _(Suggested: Include a screenshot of the search results with the Showpass plugin highlighted and the \"Install Now\" button)_\n5.  Once the installation is complete, click the Activate button. [1]\n    - _(Suggested: Include a screenshot of the \"Activate\" button after installation)_\nMethod 2: Manual Installation (If automatic installation fails)\n1.  Download the plugin .zip file from the Showpass GitHub repository (Click on \"Code\" then \"Download ZIP\").\n2.  Log in to your WordPress Dashboard.\n3.  Navigate to Plugins > Add New.\n4.  Click the Upload Plugin button at the top of the page.\n5.  Choose the showpass.zip file you downloaded and click Install Now.\n6.  Once the installation is complete, click the Activate button.\nAlternatively, for manual installation, you can unzip showpass.zip and upload the showpass folder to the /wp-content/plugins/ directory via FTP, then activate the plugin through the 'Plugins' menu in WordPress.\nAfter activating the plugin, you need to configure it to connect to your Showpass account.\n1.  In your WordPress admin dashboard, find the new \"Showpass API\""
  },
  {
    "id": "/wordpress/02-adding-single-button-embed-widget",
    "title": "Adding a Single Button or Embeddable Widget with [showpass_widget]",
    "path": "/wordpress/02-adding-single-button-embed-widget",
    "content": "The Showpass WordPress Plugin allows you to easily add \"Buy Now\" buttons or embed a full purchase widget directly onto your WordPress pages and posts. This is done using the [showpass_widget] shortcode. This is perfect for quickly linking to a specific event, product, or membership, or even embedding the entire purchase experience on a dedicated page.\nThink of a shortcode as a shortcut. It's a small piece of text wrapped in square brackets [] that WordPress replaces with dynamic content. In this case, it replaces the [showpass_widget] shortcode with a button or an embedded widget.\n1.  Go to the WordPress page or post where you want to add the button or embedded widget.\n2.  In the WordPress editor, find a place to add a new block. Click the \"+\" icon to add a new block.\n3.  Search for the \"Shortcode\" block and add it. [3]\n    - _(Suggested: Include a screenshot of adding a \"Shortcode\" block in the WordPress editor)_\n4.  Inside the Shortcode block, type the [showpass_widget] shortcode with its parameters. [3]\n    - _(Suggested: Include a screenshot showing the shortcode typed into the block)_\n5.  Click Update or Publish on your page/post.\nAlternatively, you can often paste the shortcode directly into a standard Paragraph block. [3]\nTo add a simple button that opens the Showpass purchase widget in a pop-up:\n[showpass_widget slug=\"your-event-slug\"]\n- Replace your-event-slug with the actual slug (the part of the URL after showpass.com/) of your event. For example, if your event URL is https://showpass.com/my-awesome-concert, the slug is my-awesome-concert. [8]\nThis will create a button with the default label \"Tickets\". When a user clicks it, the Showpass widget will open, allowing them to purchase tickets for that specific event.\nIf you want the purchase widget to appear directly on your page without a button click (embedded mode):\n[showpass_widget slug=\"your-event-slug\" embedded=\"true\"]\nThis is great for creating dedicated ticket pages.\nThe [showpass_widget] can be used "
  },
  {
    "id": "/wordpress/03-adding-event-list",
    "title": "Adding an Event List with [showpass_events]",
    "path": "/wordpress/03-adding-event-list",
    "content": "To display a list of your upcoming events on any WordPress page or post, you'll use the [showpass_events] shortcode. This is a powerful way to showcase multiple events at once, allowing visitors to browse what you have to offer.\nBy default, this shortcode will display events in a grid layout.\nTo add a basic event list:\n1.  Go to the WordPress page or post where you want to display your events.\n2.  Add a \"Shortcode\" block (or paste directly into a Paragraph block).\n3.  Type the following shortcode:\n    [showpass_events type=\"list\"]\nThis will display a list of your upcoming events, using the default settings (grid template, 20 events per page).\nFor the [showpass_events] shortcode to display a list of events, the type=\"list\" parameter is required.\nYou can customize how your event list appears and which events are shown using various parameters. Remember, parameters are added inside the square brackets [] and follow the parameter=\"value\" format.\nHere are the common parameters for [showpass_events type=\"list\"]:\n- template=\"default|list|data\"\n  - Use Case: To change the visual layout of your event list.\n  - \"default\": Displays events in a grid view (this is the default if the parameter is not used).\n  - \"list\": Displays events in a vertical list view.\n  - \"data\": Returns the raw event data in JSON format. This is for advanced users who want to build completely custom templates with PHP. (See \"Creating Custom Templates\" page for more info).\n  - Example (List View): [showpass_events type=\"list\" template=\"list\"]\n- page_size=\"number\"\n  - Use Case: To control how many events are shown per page. If you have more events than this number, pagination links (Next/Previous Page) will usually appear (depending on the template).\n  - Default: 20\n  - Example (Show 5 events per page): [showpass_events type=\"list\" page_size=\"5\"]\n- detail_page=\"your-event-detail-page-slug\"\n  - Use Case: To link each event in the list to a dedicated event detail page on your WordPress site. This is highly r"
  },
  {
    "id": "/wordpress/04-adding-event-detail-page",
    "title": "Adding an Event Detail Page with [showpass_events]",
    "path": "/wordpress/04-adding-event-detail-page",
    "content": "An Event Detail page is a dedicated page on your website that shows all the information for a single event. This typically includes the event name, description, date, time, location, image, and the Showpass widget to purchase tickets.\nUsing event detail pages provides a much richer experience for your users compared to just linking directly to Showpass from an event list.\n1.  You create a generic WordPress page (e.g., named \"Event Details\" with a URL like yourwebsite.com/event-details).\n2.  You add a special shortcode [showpass_events type=\"detail\"] to this page.\n3.  When a user clicks on an event from your event list (which you've configured with the detail_page parameter), they are taken to this generic page.\n4.  The plugin intelligently looks at the URL (specifically a ?slug= or ?event= part added to the URL) to figure out _which_ event's details to display on that page.\n1.  Create a New WordPress Page:\n    - In your WordPress admin dashboard, go to Pages > Add New.\n    - Give your page a title. This title is usually for internal reference or can be generic like \"Event Information\" because the actual event name will be displayed by the shortcode. A common practice is to name it something like \"Event Detail\" or \"Show\".\n    - The permalink (slug) of this page is important. For example, if you title it \"Event Detail\", the slug might become event-detail. Let's say you choose event-detail for this example.\n      - _(Suggested: Include a screenshot of creating a new page and highlighting the permalink/slug field)_\n2.  Add the Shortcode:\n    - On the new page you just created, add a \"Shortcode\" block.\n    - Inside the block, type the following shortcode:\n      [showpass_events type=\"detail\"]\n      - _(Suggested: Include a screenshot of the shortcode block with [showpass_events type=\"detail\"])_\n    - This is the basic shortcode. It tells the plugin to display details for a single event.\n3.  Publish the Page:\n    - Click Publish to make your event detail page live.\n4.  Up"
  },
  {
    "id": "/wordpress/05-adding-calendar-widget",
    "title": "Adding a Calendar Widget",
    "path": "/wordpress/05-adding-calendar-widget",
    "content": "Showpass offers a modern calendar widget to display your events. This is often a great solution for venues with many time-slot based events or if you want to provide a visual calendar view for your users.\nThere are two main ways to add the new calendar:\n1.  As a button that opens the calendar in a pop-up.\n2.  As a calendar embedded directly onto your page.\nNote: The plugin refers to this as \"Calendar Widget V2.0\" in the GitHub readme and recommends it over the older [showpass_calendar] shortcode.\nThis shortcode adds a button to your page. When a user clicks this button, the Showpass event calendar opens in a pop-up window.\nHow to Add:\n1.  Go to the WordPress page or post where you want the button.\n2.  Add a \"Shortcode\" block.\n3.  Type the shortcode: [showpass_calendar_widget]\nBasic Usage:\n[showpass_calendar_widget]\nThis will create a button with the default label \"Get Tickets\".\n- label=\"Your Button Text\"\n  - Use Case: To change the text displayed on the button.\n  - Default: \"Get Tickets\"\n  - Example: [showpass_calendar_widget label=\"View Event Calendar\"]\n- tags=\"your-tag\" (or tags=\"tag1,tag2\")\n  - Use Case: To filter the events displayed in the pop-up calendar by specific Showpass tags (categories). If you remove this parameter, all events will be shown.\n  - Example (Only show events tagged \"comedy\"):\n    [showpass_calendar_widget label=\"Comedy Shows Calendar\" tags=\"comedy\"]\n  - Example (Show all events):\n    [showpass_calendar_widget label=\"Full Event Calendar\"]\nThis shortcode embeds the full calendar directly onto your WordPress page or post.\nHow to Add:\n1.  Go to the WordPress page or post where you want the calendar embedded.\n2.  Add a \"Shortcode\" block.\n3.  Type the shortcode: [showpass_embed_calendar]\nImportant Consideration for Embedded Calendar:\nFor the embedded calendar to display correctly, especially on desktop computers, ensure the container or section of your page where you place this shortcode is at least 1200 pixels wide. If the container is too narro"
  },
  {
    "id": "/wordpress/06-adding-product-list",
    "title": "Adding a Product List with [showpass_products]",
    "path": "/wordpress/06-adding-product-list",
    "content": "If you sell merchandise, add-ons, or other non-event items through Showpass, you can display them on your WordPress site using the [showpass_products] shortcode. This allows customers to browse and purchase your products easily.\nTo add a basic product list:\n1.  Go to the WordPress page or post where you want to display your products.\n2.  Add a \"Shortcode\" block.\n3.  Type the following shortcode:\n    [showpass_products]\nBy default, this will display your products in a grid layout, showing up to 20 products per page.\nYou can customize the layout and content of your product list using these parameters:\n- template=\"grid|list|data\"\n  - Use Case: To change the visual layout of your product list.\n  - \"grid\" (Default): Displays products in a grid format.\n  - \"list\": Displays products in a vertical list format.\n  - \"data\": Returns the raw product data in JSON format. This is for advanced users who want to build completely custom templates with PHP. (See \"Creating Custom Templates\" for more info).\n  - Example (List View): [showpass_products template=\"list\"]\n- page_size=\"number\"\n  - Use Case: To control how many products are shown per page.\n  - Default: 20\n  - Example (Show 8 products per page): [showpass_products page_size=\"8\"]\n- product_ids=\"id1,id2,id3\"\n  - Use Case: To display only a specific selection of products, rather than all available products.\n  - What it is: A comma-separated list of Showpass Product IDs. You can find these IDs in your Showpass dashboard when managing your products.\n  - Example (Display only products with IDs 2, 6, and 7):\n    [showpass_products product_ids=\"2,6,7\"]\n- show_widget_description=\"true\" (or show_widget_description=\"false\")\n  - Use Case: To explicitly show or hide the description panel within the purchase widget if a product is clicked. This overrides the global admin setting.\n  - Example: [showpass_products show_widget_description=\"true\"]\nHere's an example combining several parameters:\n[showpass_products template=\"list\" page_size=\"12\" p"
  },
  {
    "id": "/wordpress/07-adding-membership-list",
    "title": "Adding a Membership List with [showpass_memberships]",
    "path": "/wordpress/07-adding-membership-list",
    "content": "If your organization offers memberships through Showpass, you can showcase them on your WordPress site using the [showpass_memberships] shortcode. This makes it easy for visitors to see your membership options and sign up.\nTo add a basic membership list:\n1.  Go to the WordPress page or post where you want to display your memberships.\n2.  Add a \"Shortcode\" block.\n3.  Type the following shortcode:\n    [showpass_memberships]\nBy default, this will display your memberships in a grid layout, showing up to 20 membership groups per page.\nYou can customize the layout and which memberships are displayed using these parameters:\n- template=\"grid|data\"\n  - Use Case: To change the visual layout of your membership list.\n  - \"grid\" (Default): Displays memberships in a grid format. (Currently, \"list\" is not explicitly listed as an option for memberships in the readme, \"grid\" is the primary default mentioned).\n  - \"data\": Returns the raw membership data in JSON format. This is for advanced users who want to build completely custom templates with PHP. (See \"Creating Custom Templates\" for more info).\n  - Example: [showpass_memberships template=\"grid\"] (This is the default, but can be specified).\n- page_size=\"number\"\n  - Use Case: To control how many membership groups are shown per page.\n  - Default: 20\n  - Example (Show 8 memberships per page): [showpass_memberships page_size=\"8\"]\n- membership_ids=\"id1,id2,id3\"\n  - Use Case: To display only a specific selection of membership groups, rather than all available ones.\n  - What it is: A comma-separated list of Showpass Membership Group IDs. You can find these IDs in your Showpass dashboard when managing your memberships.\n  - Example (Display only membership groups with IDs 2, 6, and 7):\n    [showpass_memberships membership_ids=\"2,6,7\"]\n- show_widget_description=\"true\" (or show_widget_description=\"false\")\n  - Use Case: To explicitly show or hide the description panel within the purchase widget if a membership is clicked. This overrides the g"
  },
  {
    "id": "/wordpress/08-adding-checkout-cart-button",
    "title": "Adding a Checkout / Shopping Cart Button with [showpass_cart_button]",
    "path": "/wordpress/08-adding-checkout-cart-button",
    "content": "The [showpass_cart_button] shortcode allows you to add a button to your site that opens the Showpass shopping cart and checkout widget. This is essential for allowing customers to review their selected tickets, products, or memberships and complete their purchase.\nThe button will dynamically update to show the number of items currently in the user's cart (e.g., \"Shopping Cart (3)\").\n1.  Go to the WordPress page or post where you want the cart button. This is often placed in a website header or a persistent sidebar for easy access.\n2.  Add a \"Shortcode\" block.\n3.  Type the shortcode: [showpass_cart_button]\nBasic Usage (Button opens pop-up cart):\n[showpass_cart_button]\nThis will display a button, typically saying \"Shopping Cart (x)\". When clicked, the Showpass cart/checkout widget will open in a pop-up.\nYou can also embed the entire shopping cart and checkout process directly onto a page, for instance, a dedicated \"Checkout\" page.\nHow to Embed the Cart:\n[showpass_cart_button embedded=\"true\"]\nThis will display the cart interface directly within your page content.\n- embedded=\"true\" (or embedded=\"false\")\n  - Use Case: To display the cart/checkout widget directly on the page instead of as a button that opens a pop-up.\n  - \"false\" (Default): A button is shown.\n  - \"true\": The cart/checkout widget is embedded directly into the page content.\n  - Example (Embedded Cart): [showpass_cart_button embedded=\"true\"]\n- label=\"Your Cart Label\" (This parameter is not explicitly listed in the readme for showpass_cart_button but is common for buttons. Test if needed. The default includes the item count.)\n  - Use Case: Potentially to change the static part of the button's text, though the item count (x) is dynamic.\n  - Example: [showpass_cart_button label=\"View Your Cart\"] (Verify if this customizes the label as expected, or if it's overridden by the dynamic count text).\n- Website Header: Most common and user-friendly location.\n- Sidebar: If your theme has a persistent sidebar.\n- Footer: "
  },
  {
    "id": "/wordpress/09-advanced-dynamic-cart-counter-jquery",
    "title": "Advanced: Adding a Dynamic Cart Counter with Custom JavaScript",
    "path": "/wordpress/09-advanced-dynamic-cart-counter-jquery",
    "content": "The standard Showpass WordPress plugin provides a [showpass_cart_button] shortcode that conveniently includes a text-based cart counter (e.g., \"Shopping Cart (3)\"). This is perfect for most users.\nHowever, if you're looking for a more integrated cart display—perhaps a dynamic counter directly in your website's main navigation menu or a custom header element—you can achieve this with a bit of custom JavaScript. This guide outlines how to implement such a feature.\nPlease Note: This is an advanced customization. It requires familiarity with HTML, CSS, JavaScript (jQuery), and adding custom code to your WordPress theme. If you're not comfortable with these steps, consider working with a web developer.\nThis custom JavaScript solution will:\n1.  Listen for Cart Updates: It actively listens for changes in the Showpass cart (e.g., when a customer adds a ticket).\n2.  Dynamically Update Your HTML: It updates a specific element on your webpage to show the current number of items in the cart (e.g., \"Cart (2)\" or \"Cart\" if empty).\n3.  Enable Click-to-Open Cart: It allows you to designate an element (like your custom counter or a menu item) that, when clicked, will open the Showpass checkout widget.\n- Showpass WordPress Plugin: Ensure the Showpass plugin is installed and activated.\n- jQuery: WordPress includes jQuery by default, so this should be available on your site.\n- JS-Cookie Library: This JavaScript library is used to interact with cookies. You'll need to add it to your site.\n  - You can download it from GitHub or use a CDN.\n  - A common way to include it is by adding the following line to your theme (ideally via wp_enqueue_script, or for testing, in your theme's header before wp_head()):\n    <script src=\"https://cdn.jsdelivr.net/npm/js-cookie@3/dist/js.cookie.min.js\"></script>\n- Identifiable HTML Elements: Your website's theme needs to have specific HTML elements that you can target with jQuery:\n  - An element where the cart count text will be displayed (e.g., a <span> ins"
  },
  {
    "id": "/wordpress/10-widgets-and-affiliate-tracking-links",
    "title": "Widgets and Tracking Links (Affiliate Tracking)",
    "path": "/wordpress/10-widgets-and-affiliate-tracking-links",
    "content": "Showpass allows you to use affiliate tracking links to monitor the sales performance of different marketing channels or partners. When a customer arrives at your website through one of these special tracking links, the Showpass WordPress plugin can automatically associate any subsequent purchases made through the [showpass_widget] (for events) with that tracking link.\n1.  Create an Affiliate Tracking Link in Showpass:\n    - First, you need to generate an affiliate tracking link within your Showpass dashboard. For detailed instructions on how to do this, please refer to the Showpass support documentation: http://support.showpass.com/event-organizers/tracking-links/affiliate-tracking-links\n    - When you create this link, Showpass will provide you with a unique token (e.g., 8ee54af5).\n2.  Customer Clicks the Tracking Link:\n    - You share this full tracking link (e.g., https://www.showpass.com/your-event/?tracking-id=8ee54af5 or however Showpass formats it) in your campaign or with your affiliate.\n    - When a customer clicks this link, they are taken to Showpass.\n3.  Using the aff Query Parameter on Your Website:\n    - To integrate this with your WordPress site where the Showpass plugin and [showpass_widget] shortcode are used, you'll need to get the customer to _your site_ with a special URL parameter.\n    - Add the aff query parameter to the URL of your website page where the Showpass widget button is. The value of this parameter should be the unique token from your Showpass tracking link.\n    - Example URL for your website:\n      https://yourwebsite.com/event-page/?aff=8ee54af5\n      (Replace 8ee54af5 with your actual tracking token).\n    - When a user visits your site using such a URL, the plugin creates a cookie on their browser that stores this aff token.\n4.  Automatic Tracking ID Injection:\n    - The [showpass_widget] shortcode (specifically when type=\"event\") is automatically designed to look for this cookie.\n    - If the cookie with the aff token is present,"
  },
  {
    "id": "/wordpress/11-creating-custom-templates",
    "title": "Creating Custom Wordpress Templates with Showpass data",
    "path": "/wordpress/11-creating-custom-templates",
    "content": "While the Showpass WordPress Plugin provides default templates for displaying event lists you might want to create your own unique layouts and designs.\nThis is an advanced topic that requires some knowledge of PHP, HTML, and WordPress theme development.\nThe key to creating custom templates is the template=\"data\" parameter available for the relevant shortcodes:\n[showpass_events template=\"data\"]\nWhen you use template=\"data\", the shortcode doesn't output any HTML. Instead, it returns the raw data fetched from the Showpass API in JSON (JavaScript Object Notation) format. You can then use this JSON data within your own PHP WordPress template files to structure and style the information exactly how you want.\n1.  Identify the Data You Need:\n    - Use the shortcode with template=\"data\" on a test page (e.g., [showpass_events type=\"list\" template=\"data\"]).\n    - View the source of that page or temporarily print the output within your test template to see the full structure of the JSON data returned by the Showpass API. The GitHub Readme (Sections 4.1 for a single event and 4.2 for a list of events) also provides examples of the JSON structure.\n    - While the full JSON contains many fields, for typical event displays, you'll likely focus on these key fields within each item of the results array:\n      - slug: The event slug, crucial for initiating the Showpass purchase widget (e.g., for [showpass_widget slug=\"your-event-slug\"]).\n      - name: The display name of the event.\n      - starts_on: The event's start date and time in UTC format (e.g., \"2024-12-25T19:00:00Z\").\n      - ends_on: The event's end date and time in UTC format.\n      - timezone: The timezone of the event (e.g., \"America/Denver\"). Used with helper functions to display local times.\n      - description: The event description, which may include HTML formatting. Use wp_kses_post() when displaying this if you want to render the HTML safely.\n      - description_without_html: The event description with all HTML tags"
  },
  {
    "id": "/wordpress/12-automatically-opening-popup-widgets",
    "title": "Automatically Opening Pop-up Widgets on Page Load",
    "path": "/wordpress/12-automatically-opening-popup-widgets",
    "content": "Sometimes, you might want the Showpass ticket-buying widget to open automatically as soon as a customer lands on a specific page on your website. This can be useful for targeted landing pages where the primary call to action is to purchase tickets for a particular event.\nThe Showpass WordPress plugin supports this functionality using a URL query parameter: auto.\nYou append ?auto=your-event-slug to the URL of the WordPress page where you want the widget to auto-open.\n- your-event-slug: This is the slug of the Showpass event you want to feature in the pop-up widget. The slug is the unique part of the event's URL on Showpass (e.g., if the event is at showpass.com/my-big-concert, the slug is my-big-concert).\nWhen a user visits this specially crafted URL, the plugin will detect the auto parameter and automatically trigger the Showpass ticket widget for the specified event slug to open in a pop-up.\n- Directing from Ad Campaigns: If you run an ad campaign for a specific event, you can link the ad directly to a page on your site with the ?auto=event-slug parameter. The widget for that event opens immediately, streamlining the purchase process.\n- Dedicated Event Landing Pages: If you have a landing page on your WordPress site focused solely on one event, automatically opening the widget can reduce clicks and potentially increase conversions.\n- Email Marketing Links: Link from an email newsletter about a specific event to your website page with the widget auto-opening.\nLet's say you have a WordPress page at yourwebsite.com/featured-event/.\nYour Showpass event slug is annual-gala-2024.\nTo make the widget for \"Annual Gala 2024\" open automatically when someone visits that page, you would use or share this URL:\nhttps://yourwebsite.com/featured-event/?auto=annual-gala-2024\nImportant Considerations:\n- User Experience: While auto-opening widgets can be effective, use this feature thoughtfully. Unexpected pop-ups can sometimes be intrusive. Ensure it makes sense in the user's journey"
  },
  {
    "id": "/wordpress/13-tips-and-troubleshooting",
    "title": "Tips & Troubleshooting for the Showpass WordPress Plugin",
    "path": "/wordpress/13-tips-and-troubleshooting",
    "content": "Here are some common tips and troubleshooting steps to help you get the most out of the Showpass WordPress Plugin and resolve any issues you might encounter.\nShortcodes are the backbone of this plugin. They are little snippets of text in square brackets [] that WordPress magically transforms into dynamic content from Showpass.\nLet's break down a typical Showpass shortcode:\n[showpass_events parameter=\"value\" parameter_2=\"value\"]\n- [ ] (Square Brackets): These are essential. All shortcodes start with [ and end with ].\n- showpass_events (Shortcode Tag): This is the main part of the shortcode. It tells WordPress _which_ Showpass function to run (e.g., showpass_events for event lists/details, showpass_widget for buy buttons, showpass_products for product lists).\n- parameter / parameter_2 (Parameters): These are like settings or options for the shortcode. They modify how the shortcode behaves or what it displays. Not all parameters are needed for every shortcode; many have default values.\n- =\"value\" (Parameter Value): This is the specific setting you're applying to a parameter. The value is usually enclosed in quotes.\nKey Points about Shortcodes:\n- You can have multiple parameters in a single shortcode.\n- There's only one main shortcode tag per set of square brackets (e.g., you can't have [showpass_events showpass_widget]).\n- If you don't provide a parameter, the plugin will use a default value for it.\n- Check Your Organization ID:\n  - Symptom: The list is empty, or it shows events from a completely different organization.\n  - Solution: The most common cause is an incorrect or missing Organization ID in the plugin settings.\n    1.  In your WordPress admin dashboard, go to Showpass API. [1, 2]\n    2.  Double-check that the Organization ID field contains the correct ID for your Showpass venue/organization. [1, 2]\n    3.  You can find your Organization ID by logging into your Showpass account and navigating to https://www.showpass.com/dashboard/venues/edit/ or the 'Organizat"
  }
]